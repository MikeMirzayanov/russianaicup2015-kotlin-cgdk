package model

/**
 * Класс, определяющий кодемобиль. Содержит также все свойства прямоугольного юнита.
 */
class Car(
        id: Long, mass: Double,
        x: Double, y: Double,
        speedX: Double, speedY: Double,
        angle: Double, angularSpeed: Double,
        width: Double, height: Double,
        /**
         * @return Возвращает идентификатор игрока, которому принадлежит кодемобиль.
         */
        val playerId: Long,
        /**
         * @return Возвращает 0-индексированный номер кодемобиля среди юнитов одного игрока.
         */
        val teammateIndex: Int,
        /**
         * @return Возвращает `true`, если и только если данный кодемобиль принадлежит вам.
         */
        val isTeammate: Boolean,
        /**
         * @return Возвращает тип кодемобиля.
         */
        val type: CarType,
        /**
         * @return Возвращает количество метательных снарядов.
         */
        val projectileCount: Int,
        /**
         * @return Возвращает количество зарядов для системы закиси азота.
         */
        val nitroChargeCount: Int,
        /**
         * @return Возвращает количество канистр с мазутом.
         */
        val oilCanisterCount: Int,
        /**
         * @return Возвращает количество тиков, по прошествии которого кодемобиль может запустить очередной снаряд,
         * или `0`, если кодемобиль может совершить данное действие в текущий тик.
         */
        val remainingProjectileCooldownTicks: Int,
        /**
         * @return Возвращает количество тиков, по прошествии которого кодемобиль может использовать очередной заряд системы
         * закиси азота, или `0`, если кодемобиль может совершить данное действие в текущий тик.
         */
        val remainingNitroCooldownTicks: Int,
        /**
         * @return Возвращает количество тиков, по прошествии которого кодемобиль может разлить очередную лужу мазута,
         * или `0`, если кодемобиль может совершить данное действие в текущий тик.
         */
        val remainingOilCooldownTicks: Int,
        /**
         * @return Возвращает количество оставшихся тиков действия системы закиси азота.
         */
        val remainingNitroTicks: Int,
        /**
         * @return Возвращает количество тиков, оставшихся до полного высыхания кодемобиля, попавшего в лужу мазута.
         */
        val remainingOiledTicks: Int,
        /**
         * @return Возвращает текущую прочность кодемобиля в интервале [`0.0`, `1.0`].
         */
        val durability: Double,
        /**
         * @return Возвращает относительную мощность двигателя кодемобиля. Значение находится в интервале
         * [`-1.0`, `1.0`] кроме случаев, когда кодемобиль использует ускорение <<нитро>>.
         */
        val enginePower: Double,
        /**
         * @return Возвращает относительный угол поворота колёс (или руля, что эквивалентно) кодемобиля в интервале
         * [`-1.0`, `1.0`].
         */
        val wheelTurn: Double,
        /**
         * @return Возвращает индекс следующего ключевого тайла в массиве {@code world.waypoints}.
         */
        val nextWaypointIndex: Int,
        /**
         * @return Возвращает компоненту X позиции следующего ключевого тайла.
         * Конвертировать позицию в точные координаты можно, используя значение `game.trackTileSize`.
         */
        val nextWaypointX: Int,
        /**
         * @return Возвращает компоненту Y позиции следующего ключевого тайла.
         * Конвертировать позицию в точные координаты можно, используя значение `game.trackTileSize`.
         */
        val nextWaypointY: Int,
        /**
         * @return Возвращает `true`, если и только если данный кодемобиль финишировал. Финишировавший кодемобиль
         * перестаёт управляться игроком, а также участвовать в столкновениях с другими юнитами.
         */
        val isFinishedTrack: Boolean
) : RectangularUnit(id, mass, x, y, speedX, speedY, angle, angularSpeed, width, height)
